[use-grammars]
only = [
  # 
  "rust",
  "c",
  # 
  "go",
  "gomod",
  "gowork",
  "gotmpl",
  # 
  "python",
  "bash",
  "lua",
  "scheme",
  "sql",
  # 
  "php",
  "php-only",
  # 
  "html",
  "css",
  "scss",
  "javascript",
  "jsdoc",
  "typescript",
  "jsx",
  "vue",
  "svelte",
  # 
  "json",
  "jsonc",
  "json5",
  "toml",
  "yaml",
  "xml",
  "ini",
  "kdl",
  "ron",
  # 
  "gdscript",
  "godot-resource",
  "glsl",
  "wgsl",
  "gdshader",
  # 
  "git-config",
  "git-commit",
  "git-ignore",
  "git-rebase",
  "git-attributes",
  "sshclientconfig",
  # 
  "hosts",
  "env",
  "make",
  # 
  "comment",
  "diff",
  "regex",
  # 
  "latex",
  "typst",
  "markdown",
  "markdown.inline",
  "task",
  "todotxt",
  "mail",
  # 
  "log",
  "glicol",
  # 
  "dot",
  "hurl",
  "http",
  "po",
  "fluent",
  "pest",
  "beancount",
  "slint",
]

# ----- rust ----
# [language-server.rust-analyzer.config]
# cargo.features = "all"
# checkOnSave.features = "all"

# ------ snippets lsp -----
# https://github.com/erasin/hx-lsp 
# ./snippets
[language-server.hx-lsp]
command = "hx-lsp"

# ------ typos lsp ------
# https://github.com/tekumara/typos-lsp
# https://github.com/crate-ci/typos
# Add _typos.toml enable
[language-server.typos-lsp]
command = "typos-lsp"
config.diagnosticSeverity = "Warning"

# ---------- rust -----

[language-server.rust-analyzer.config]
inlayHints.bindingModeHints.enable = false
inlayHints.closingBraceHints.minLines = 10
inlayHints.closureReturnTypeHints.enable = "with_block"
inlayHints.discriminantHints.enable = "fieldless"
inlayHints.lifetimeElisionHints.enable = "skip_trivial"
inlayHints.typeHints.hideClosureInitialization = false
cargo.features = "all"

[[language]]
name = "rust"
language-servers = ["rust-analyzer", "hx-lsp", "typos-lsp"]

[language.debugger]
name = "lldb-dap"
transport = "stdio"
command = "lldb-vscode"

[[language.debugger.templates]]
name = "binary"
request = "launch"
completion = [{ name = "binary", completion = "filename" }]
args = { program = "{0}", initCommands = [
  "command script import /home/erasin/.config/helix/scripts/lldb_vscode_rustc_primer.py",
] }

# ---------- golang ----------------
[[language]]
name = "go"
language-servers = ["gopls", "golangci-lint-lsp", "hx-lsp", "typos-lsp"]

# ----------- godot4 -------------
[language-server.godot]
command = "nc"
args = ["127.0.0.1", "6005"]

[[language]]
name = "gdscript"
language-servers = ["godot", "hx-lsp", "typos-lsp"]

[language.debugger]
name = "lldb-vscode"
transport = "stdio"
command = "lldb-vscode"

# [[language.debugger.templates]]
# name = "binary"
# request = "launch"
# completion = [ { name = "binary", completion = "filename" } ]
# args = { program = "{0}", initCommands = [ "command script import /home/erasin/.config/helix/scripts/lldb_vscode_rustc_primer.py" ] }

[[language.debugger.templates]]
name = "gdbserver attach"
request = "attach"
completion = [
  { name = "lldb connect url", default = "connect://127.0.0.1:6007" },
  { name = "file", completion = "filename" },
  "pid",
]
args = { attachCommands = [
  "platform select remote-gdb-server",
  "platform connect {0}",
  "file {1}",
  "attach {2}",
] }

[[language]]
name = "godot-resource"
scope = "source.tscn"
file-types = ["tscn", "tres", "godot", "gdextension", "import"]

# [language.debugger]
# name ="gdscript"
# https://ask.godotengine.org/122563/how-to-get-the-godot-lsp-to-work-with-nvim-lsp


[[language]]
name = "gdshader"
scope = "source.gdshader"
injection-regex = "gdshader"
file-types = ["shader", "gdshader", "gdshaderinc"]
shebangs = []
roots = ["project.godot"]
auto-format = true
# formatter = { command = "", args = ["-"] }
comment-token = "//"
block-comment-tokens = { start = "/*", end = "*/" }
indent = { tab-width = 4, unit = "\t" }
# language-servers = ["gdshader-lsp", "hx-lsp", "typos-lsp"]

[[grammar]]
name = "gdshader"
source = { git = "https://github.com/GodOfAvacyn/tree-sitter-gdshader", rev = "ffd9f958df13cae04593781d7d2562295a872455" }

# [language-server.gdshader-lsp]
# command = "gdshader-lsp"


# ------ emmet support -------------
[language-server.emmet-language-server]
# command="emmet-language-server"
command = "emmet-ls"
args = ["--stdio"]

# ------ tailwindcss-language-server -------

# npm i -g helix-twcss , use hx-tw replace tailwindcss-language-server
[language-server.tailwindcss-ls]
command = "hx-tw"
# command = "tailwindcss-language-server"
args = ["--stdio"]

# -------- typescript -----------
[language-server.typescript-language-server.config]
hostInfo = "helix"
locale = "zh-CN"

[language-server.typescript-language-server.config.typescript.inlayHints]
includeInlayEnumMemberValueHints = true
includeInlayFunctionLikeReturnTypeHints = true
includeInlayFunctionParameterTypeHints = true
includeInlayParameterNameHints = "all"
includeInlayParameterNameHintsWhenArgumentMatchesName = true
includeInlayPropertyDeclarationTypeHints = true
includeInlayVariableTypeHints = true
# includeInlayVariableTypeHintsWhenTypeMatchesName = true

[language-server.typescript-language-server.config.javascript.inlayHints]
includeInlayEnumMemberValueHints = true
includeInlayFunctionLikeReturnTypeHints = true
includeInlayFunctionParameterTypeHints = true
includeInlayParameterNameHints = "all"
includeInlayParameterNameHintsWhenArgumentMatchesName = true
includeInlayPropertyDeclarationTypeHints = true
includeInlayVariableTypeHints = true

# --- svelte ---
[[language]]
name = "svelte"
indent = { tab-width = 4, unit = "    " }
roots = ["package.json"]
language-servers = ["svelteserver", "tailwindcss-ls"]

[[language]]
name = "css"
file-types = ["css", "scss", "less"]
language-servers = [
  "vscode-css-language-server",
  "emmet-language-server",
  "tailwindcss-ls",
]

[[language]]
name = "html"
file-types = ["html", "xhtml"]
language-servers = [
  "vscode-html-language-server",
  "emmet-language-server",
  "tailwindcss-ls",
  "hx-lsp",
  "typos-lsp",
]

[[language]]
name = "vue"
indent = { tab-width = 4, unit = "    " }
language-servers = ["vuels", "tailwindcss-ls", "hx-lsp", "typos-lsp"]

[[language]]
name = "tsx"
indent = { tab-width = 4, unit = "    " }
language-servers = [
  "typescript-language-server",
  "tailwindcss-ls",
  "hx-lsp",
  "typos-lsp",
]

[[language]]
name = "jsx"
indent = { tab-width = 4, unit = "    " }
language-servers = [
  "typescript-language-server",
  "tailwindcss-ls",
  "hx-lsp",
  "typos-lsp",
]

[[grammar]]
name = "jsdoc"
source = { git = "https://github.com/tree-sitter/tree-sitter-jsdoc", rev = "49fde205b59a1d9792efc21ee0b6d50bbd35ff14" }

[[language]]
name = "json"
formatter = { command = 'prettier' }

[[language]]
name = "javascript"
indent = { tab-width = 4, unit = "    " }
formatter = { command = 'prettier', args = [
  "--parser",
  "typescript",
  "--tab-width",
  "4",
] }
auto-format = true
language-servers = [
  "typescript-language-server",
  "vscode-eslint-language-server",
  "hx-lsp",
  "typos-lsp",
]

[[language]]
name = "typescript"
indent = { tab-width = 4, unit = "    " }
# 使用 package.prettier 配置
formatter = { command = 'prettier', args = [
  "--parser",
  "typescript",
  "--tab-width",
  "4",
] }
auto-format = true
language-servers = [
  "typescript-language-server",
  "vscode-eslint-language-server",
  "hx-lsp",
  "typos-lsp",
]

# [language.formatter]

# command = "prettier"
# args = ["--parser=typescript"]

[[language]]
name = "yaml"
formatter = { command = 'prettier', args = ["--parser", "yaml"] }

# ----------- php --------------
[language-server.intelephense.config]
licenceKey = "/home/erasin/.config/apikeys/intelephenser_licence.txt"
storagePath = "/home/erasin/.config/php/"                             # os.tmpdir()
globalStoragePath = "/home/erasin/.config/php/"                       # os.homedir()
# clearCache = false # clean state

# ----------- python pyright --------------

# https://github.com/microsoft/pyright
[language-server.pyright]
command = "pyright-langserver"
args = ["--stdio"]
# 禁用 diagnostics, format, 使用 ruff-lsp
except-features = ["diagnostics", "format"]

#  https://github.com/microsoft/pyright/blob/main/docs/configuration.md
#  为 pyright 在 pyproject.toml 中设置 venv 路径适配 rye 等 venv 
# ```toml
#  [tool.pyright]
#  venvPath = "."
#  venv = ".venv"
# ```

[language-server.pyright.config]
settings.python.analysis = { autoImportCompletions = true, typeCheckingMode = "on", autoSearchPaths = true, useLibraryCodeForTypes = true, diagnosticMode = "openFilesOnly" }

[language-server.pylsp.config]
pylsp.plugins.rope_autoimport.enabled = true

# https://github.com/mtshiba/pylyzer
[language-server.pylyzer]
command = "pylyzer"
args = ["--server"]

# https://github.com/astral-sh/ruff-lsp
[language-server.ruff-lsp]
command = "ruff-lsp"
args = ["--ignore", "E501", "E402"]

# support ruff check
# support ruff format

# https://docs.astral.sh/ruff/configuration/
# use pyproject.toml [tool.ruff]

[[language]]
name = "python"
file-types = [
  "py",
  "pyi",
  "py3",
  "pyw",
  "ptl",
  ".pythonstartup",
  ".pythonrc",
  "SConstruct",
  "mel",
]
roots = ["pyproject.toml", "pyrightconfig.json"]
# formatter = { command = "ruff", args = ["format"] }
language-servers = ["pyright", "ruff-lsp", "hx-lsp", "typos-lsp"]
auto-format = true

# ------------ lua --------------

[[language]]
name = "lua"
indent = { tab-width = 4, unit = "    " }

[language-server.lua-language-server]
args = ["--locale", "zh-cn"]

# 建议使用 .luarc.json 配置服务器

# https://luals.github.io/wiki/configuration/
[language-server.lua-language-server.config.Lua.hint]
enable = true
arrayIndex = "Enable"
setType = true
paramName = "All"
paramType = true
await = true

[language-server.lua-language-server.config.Lua.workspace]
library = [
  "${3rd}/love2d/library",
  "${3rd}/busted/library",
  "${3rd}/Defold/library",
]

[language-server.lua-language-server.config.Lua.runtime]
nonstandardSymbol = [
  "+=",
  "-=",
  "*=",
  "/=",
  "//=",
  "%=",
  "<<=",
  ">>=",
  "&=",
  "|=",
  "^=",
]

special = { "import" = "require" }

[[grammar]]
name = "lua"
# source = { git = "https://github.com/MunifTanjim/tree-sitter-lua", rev = "9668709211b2e683f27f414454a8b51bf0a6bda1" }
source = { git = "https://github.com/erasin/tree-sitter-lua", rev = "0158ad30769a3fcf7f40dcaaa94509023ff7fea6" }
# source = { path = "/home/erasin/Development/project/tree-sitter-lua", rev = "" }

# ----------- git ---------------

[[language]]
name = "git-commit"
soft-wrap = { enable = true, wrap-at-text-width = true }

[[language]]
name = "ini"
scope = "source.ini"
file-types = [
  "ini",
  # Systemd unit files
  "service",
  "automount",
  "device",
  "mount",
  "path",
  "service",
  "slice",
  "socket",
  "swap",
  "target",
  "timer",
  # Podman quadlets
  "container",
  "volume",
  "kube",
  "network",
  { glob = ".editorconfig" },
  { glob = "rclone.conf" },
  "properties",
  "cfg",
  "directory",
  "desktop",
]


# --- markdown ----
[[language]]
name = "markdown"
formatter = { command = "prettier", args = ["--parser", "markdown"] }
language-servers = ["marksman", "markdown-oxide", "hx-lsp", "typos-lsp"]
# 设定 zen-mode-like
# text-width = 80
# soft-wrap = { enable = true, wrap-at-text-width = true }

# ---- latex ----
[[language]]
name = "latex"
language-servers = ["texlab"]
text-width = 80
soft-wrap = { enable = true, wrap-at-text-width = true }

# ---- typst ----

[[language]]
name = "typst"
language-servers = ["typst-lsp", "hx-lsp", "typos-lsp"]
formatter = { command = "typst", args = ["c"] }
text-width = 80
soft-wrap = { enable = true, wrap-at-text-width = true }

# --- glicol ----
# https://github.com/TenStrings/glicol-lsp
[language-server.glicol-lsp]
command = "glicol-lsp"

# https://github.com/chaosprint/glicol
[[language]]
name = "glicol"
scope = "source.glicol"
injection-regex = "glicol"
file-types = ["glicol"]
comment-token = "//"
indent = { tab-width = 4, unit = "\t" }
language-servers = ["glicol-lsp"]

[[grammar]]
name = "glicol"
source = { git = "https://github.com/TenStrings/tree-sitter-glicol", rev = "da7b171e87462afa6c74ad772742ec485f821072" }


[[language]]
name = "mail"
scope = "source.eml"
injection-regex = "mail"
file-types = ["eml"]
indent = { tab-width = 4, unit = "\t" }

[[grammar]]
name = "mail"
source = { git = "https://github.com/dagle/tree-sitter-mail", rev = "a668550628e9a76bcac4864864dd9d60c91be27f" }

[language-server.beancount-lsp]
command = "beancount-language-server"

[[language]]
name = "beancount"
language-servers = ["bleancount-lsp", "hx-lsp"]


[[language]]
name = "fluent"
scope = "source.ftl"
injection-regex = "fluent"
file-types = ["ftl"]
comment-token = "#"
indent = { tab-width = 4, unit = "    " }

[[grammar]]
name = "fluent"
# source = { git = "https://github.com/tree-sitter/tree-sitter-fluent", rev = "858fdd6f1e81992e00d3541bfb31bac9365d7a47" }
source = { git = "https://github.com/erasin/tree-sitter-fluent", rev = "14ad08028c0287ca8c10ce620377f581e17dddb2" }

[[language]]
name = "http"
scope = "source.http"
injection-regex = "http"
file-types = ["rest", "http"]
comment-token = "#"
indent = { tab-width = 4, unit = "    " }

[[grammar]]
name = "http"
source = { git = "https://github.com/rest-nvim/tree-sitter-http", rev = "e061995f0caf2fa30f68fa1fdf2c08bcbd4629a8" }

[[language]]
name = "ron"
formatter = { command = 'ronfmt', args = ["-w", "80"] }


[[language]]
name = "scheme"
# formatter = { command = "raco", args = ["fmt", "-i"] }
# auto-format = true
language-servers = ["steel-language-server"]

# For development
[language-server.steel-language-server]
command = "steel-language-server"
args = []
