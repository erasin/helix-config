# ----- rust ----
# [language-server.rust-analyzer.config]
# cargo.features = "all"
# checkOnSave.features = "all"

# ---- pinyin ----

[language-server.pinyin]
command = "ds-pinyin-lsp"

[language-server.pinyin.config]
db_path = "~/.local/share/pinyin.dict.db3"
completion_on = true
match_as_same_as_input = true

# ----------- godot4 -------------
[language-server.godot]
command = "nc"
args = ["127.0.0.1", "6005"]

[[language]]
name = "gdscript"
language-servers = ["godot"]

[[language]]
name = "godot-resource"
scope = "source.tscn"
file-types = ["tscn", "tres", "godot", "gdextension", "import"]
# language-servers = ["godot"]

# [language.debugger]
# name ="gdscript"
# https://ask.godotengine.org/122563/how-to-get-the-godot-lsp-to-work-with-nvim-lsp

# ------ emmet support -------------
[language-server.emmet-language-server]
# command="emmet-language-server"
command = "emmet-ls"
args = ["--stdio"]

# ------ tailwindcss-language-server -------

# npm i -g helix-twcss , use hx-tw replace tailwindcss-language-server
[language-server.tailwindcss-language-server]
command = "hx-tw"
# command = "tailwindcss-language-server"
args = ["--stdio"]

# -------- typescript -----------
[language-server.typescript-language-server.config]
hostInfo = "helix"
locale = "zh-CN"

[language-server.typescript-language-server.config.typescript.inlayHints]
includeInlayEnumMemberValueHints = true
includeInlayFunctionLikeReturnTypeHints = true
includeInlayFunctionParameterTypeHints = true
includeInlayParameterNameHints = "all"
includeInlayParameterNameHintsWhenArgumentMatchesName = true
includeInlayPropertyDeclarationTypeHints = true
includeInlayVariableTypeHints = true

[language-server.typescript-language-server.config.javascript.inlayHints]
includeInlayEnumMemberValueHints = true
includeInlayFunctionLikeReturnTypeHints = true
includeInlayFunctionParameterTypeHints = true
includeInlayParameterNameHints = "all"
includeInlayParameterNameHintsWhenArgumentMatchesName = true
includeInlayPropertyDeclarationTypeHints = true
includeInlayVariableTypeHints = true

# ------- svelte -----------

# has merged to master
# [language-server.svelteserver.config.configuration.typescript]
# locale = "zh-CN"
# inlayHints.parameterTypes.enabled = true
# inlayHints.variableTypes.enabled = true
# inlayHints.propertyDeclarationTypes.enabled = true
# inlayHints.functionLikeReturnTypes.enabled = true
# inlayHints.enumMemberValues.enabled = true
# inlayHints.parameterNames.enabled = "all"


# [language-server.svelteserver.config.configuration.javascript]
# locale = "zh-CN"
# inlayHints.parameterTypes.enabled = true
# inlayHints.variableTypes.enabled = true
# inlayHints.propertyDeclarationTypes.enabled = true
# inlayHints.functionLikeReturnTypes.enabled = true
# inlayHints.enumMemberValues.enabled = true
# inlayHints.parameterNames.enabled = "all"

[[language]]
name = "svelte"
roots = ["package.json"]
language-servers = ["svelteserver", "tailwindcss-language-server"]

[[grammar]]
name = "svelte"
source = { git = "https://github.com/Himujjal/tree-sitter-svelte", rev = "697bb515471871e85ff799ea57a76298a71a9cca" }

[[language]]
name = "css"
file-types = ["css", "scss", "less"]
language-servers = [
  "vscode-css-language-server",
  "emmet-language-server",
  "tailwindcss-language-server",
]

[[language]]
name = "html"
file-types = ["html", "xhtml"]
language-servers = [
  "vscode-html-language-server",
  "emmet-language-server",
  "tailwindcss-language-server",
]

[[language]]
name = "vue"
language-servers = ["vuels", "tailwindcss-language-server"]

[[language]]
name = "tsx"
language-servers = ["typescript-language-server", "tailwindcss-language-server"]

[[language]]
name = "jsx"
language-servers = ["typescript-language-server", "tailwindcss-language-server"]

# [[language]]
# name="javascript"
# auto-format = true

# [language.formatter]
# command = "prettier"
# args = ["--parser=typescript"]


# ----------- php --------------
[language-server.intelephense.config]
licenceKey = "/home/erasin/.config/php/intelephenser_licence.txt"
storagePath = "/home/erasin/.config/php/"                         # os.tmpdir()
globalStoragePath = "/home/erasin/.config/php/"                   # os.homedir()
# clearCache = false # clean state

# ----------- python pyright --------------

[language-server.pyright]
command = "pyright-langserver"
args = ["--stdio"]

[language-server.pyright.config.pyright.inlayHints]
functionReturnTypes = true
variableTypes = true

[language-server.pyright.config.python.analysis]
autoSearchPaths = true
diagnosticMode = "workspace"
useLibraryCodeForTypes = true

[language-server.pylsp.config]
pylsp.plugins.rope_autoimport.enabled = true

[[language]]
name = "python"
file-types = ["py", "pyi"]
roots = ["pyproject.toml", "pyrightconfig.json"]
# language-servers = ["pyright"]
formatter = { command = "black", args = ["-"] }
auto-format = true

# ---------- dart -----------------

[language-server.dart.config.dart]
# dart lsp 自定义函数，暂不支持
closingLabels = true
outline = true
flutterOutline = true

# ------------ lua --------------

[[language]]
name = "lua"
indent = { tab-width = 4, unit = "    " }

[language-server.lua-language-server]
args = ["--locale", "zh-cn"]

# 建议使用 .luarc.json 配置服务器

# https://luals.github.io/wiki/configuration/
[language-server.lua-language-server.config.Lua.hint]
enable = true
arrayIndex = "Enable"
setType = true
paramName = "All"
paramType = true
await = true

[language-server.lua-language-server.config.Lua.workspace]
library = [
  "${3rd}/love2d/library",
  "${3rd}/busted/library",
  "${3rd}/Defold/library",
]

[language-server.lua-language-server.config.Lua.runtime]
nonstandardSymbol = ["+=", "-=", "*=", "/=", "//=", "%=", "<<=", ">>=", "&=", "|=", "^="]

special = {"import"="require"}

[[grammar]]
name = "lua"
# source = { git = "https://github.com/MunifTanjim/tree-sitter-lua", rev = "9668709211b2e683f27f414454a8b51bf0a6bda1" }
# source = { git = "https://github.com/erasin/tree-sitter-lua", rev = "" }
source = { path = "/home/erasin/Development/project/tree-sitter-lua", rev = "" }

# ----------- git ---------------

[[language]]
name = "git-commit"
soft-wrap = { enable = true, wrap-at-text-width = true }

# ----------- bash ---------------
[[language]]
name = "bash"
file-types = [
  "sh",
  "bash",
  "zsh",
  ".bash_login",
  ".bash_logout",
  ".bash_profile",
  ".bashrc",
  ".profile",
  ".zshenv",
  ".zlogin",
  ".zlogout",
  ".zprofile",
  ".zshrc",
  ".bash_alias",
  ".bash_path",
  "host",
]


[[language]]
name = "xml"
file-types = [
  "xml",
  "mobileconfig",
  "plist",
  "xib",
  "storyboard",
  "svg",
  "ncx",
  "opf",
  "iml",
  "ui",
  "xml.in",
  "font.conf",
  ".manifest",
]

[[language]]
name = "glsl"
file-types = [
  "glsl",
  "vert",
  "tesc",
  "tese",
  "geom",
  "frag",
  "comp",
  "shader",
  "gdshader",
  "gdshaderinc",
]
roots = ['.git']
# language-server = { command = "glslls", args = ["--stdin"] }
# config = { single_file_support = true }


[[language]]
name = "ini"
scope = "source.ini"
file-types = [
  "ini",
  # Systemd unit files
  "service",
  "automount",
  "device",
  "mount",
  "path",
  "service",
  "slice",
  "socket",
  "swap",
  "target",
  "timer",
  # Podman quadlets
  "container",
  "volume",
  "kube",
  "network",
  ".editorconfig",
  "properties",
  "cfg",
  "directory",
  "desktop",
]


# dev
[[language]]
name = "markdown"
file-types = ["md", "markdown"]
roots = [".git"]
formatter = { command = "prettier", args = ["--parser", "markdown"] }
# 设定zen-mode-like
# text-width = 80
# soft-wrap = { enable = true, wrap-at-text-width = true }

# [[language]]
# name = "latex"
# text-width = 80
# soft-wrap = { enable = true, wrap-at-text-width = true }

[[language]]
name = "plantuml"
scope = "source.puml"
injection-regex = "plantuml"
file-types = ["puml", "pu", "wsd"]
roots = []
comment-token = "'"
indent = { tab-width = 2, unit = "  " }

# [[grammar]]
# name = "plantuml"
# source = { path = "/Users/erasin/Development/project/tree-sitter-plantuml", rev = "" }


[[language]]
name = "v"
file-types = ["v", "vv", "vsh"]

[[language]]
name = "env"
file-types = [
  ".env",
  ".env.local",
  ".env.development",
  ".env.production",
  ".env.dist",
  ".envrc",
  "env",
]

# [[language]]
# name = "http"
# scope = "source.http"
# injection-regex = "http"
# file-types = ["http"]
# roots = []
# comment-token = "#"
# indent = { tab-width = 2, unit = "  " }

# [[grammar]]
# name = "http"
# source = { git = "https://github.com/erasin/tree-sitter-http", rev = "3dc1385ab2d4ce97eb583ced6e962fff8f407830" }

# ------------- typst --------------------


[language.formatter]
command = "typst"
args = ["c"]

[[language]]
name = "sshclientconfig"
file-types = ["conf"]

[[language]]
name = "yaml"
scope = "source.yaml"
file-types = ["yml", "yaml", "meta", "asset"]

# -------------------- haxe ---------------
[[language]]
name = "haxe"
scope = "source.haxe"
injection-regex = "haxe"
file-types = ["hx"]
comment-token = "//"
indent = { tab-width = 4, unit = "\t" }
roots = ["hxml", "haxelib.json", "khafile.js"]
# language-servers = ["haxe-language-server"]

[[grammar]]
name = "haxe"
source = { git = "https://github.com/vantreeseba/tree-sitter-haxe", rev = "6f6e7989d2d8a69b50d75a77be1ebae9486280a3" }

# [language-server.haxe-language-server]
# command = "node" 
# args = [ "/home/erasin/.vscode/extensions/nadako.vshaxe-2.28.0/bin/server.js"]

# [language-server.haxe-language-server.config]
# displayArguments = ["build.hxml"]

[[grammar]]
name = "jsdoc"
source = { git = "https://github.com/tree-sitter/tree-sitter-jsdoc", rev = "6a6cf9e7341af32d8e2b2e24a37fbfebefc3dc55" }


# ====== udl idl-----
# https://webidl.spec.whatwg.org/
[[language]]
name = "webidl"
scope = "source.idl"
injection-regex = "webidl"
file-types = ["idl", "udl"]
comment-token = "//"
indent = { tab-width = 4, unit = "\t" }
roots = []

[[grammar]]
name = "webidl"
source = { path = "/home/erasin/Development/project/tree-sitter-webidl", rev = "" }


[[language]]
name = "glicol"
scope = "source.glicol"
injection-regex = "glicol"
file-types = ["glicol"]
comment-token = "//"
indent = { tab-width = 4, unit = "\t" }
roots = []

[[grammar]]
name = "glicol"
source = { git = "https://github.com/TenStrings/tree-sitter-glicol", rev = "da7b171e87462afa6c74ad772742ec485f821072" }

[[language]]
name="hurl"
formatter = { command = "hurlfmt" }

[[grammar]]
name = "hurl"
source = { git = "https://github.com/pfeiferj/tree-sitter-hurl", rev = "cd1a0ada92cc73dd0f4d7eedc162be4ded758591" }
